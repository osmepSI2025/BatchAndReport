@page
@model EContractDashboardModel
@{
    ViewData["Title"] = "E-Contract Dashboard";
    Layout = "_Layout1";

    // ปีพุทธศักราชปัจจุบัน (สำหรับ dropdown)
    var beNow = DateTime.Now.Year + 543;

    // รายชื่อเดือนภาษาไทย
    var monthList = new[]{
        "มกราคม","กุมภาพันธ์","มีนาคม","เมษายน","พฤษภาคม","มิถุนายน",
        "กรกฎาคม","สิงหาคม","กันยายน","ตุลาคม","พฤศจิกายน","ธันวาคม"
    };
}
<style>
    @@media print {
        .container { width: 210mm !important; min-height: 297mm !important; margin: 0 auto !important; background: #fff !important; box-shadow: none !important; }
    }
    .a4-export { width: 210mm !important; min-height: 297mm !important; margin: 0 auto !important; background: #fff !important; box-shadow: none !important; }
    .export-scale { transform: scale(0.7); transform-origin: top left; width: 1428px; height: 1133px; }
</style>

<h2 class="fw-bold mb-3">E-Contract Dashboard</h2>

<div class="container">
    <!-- Row 1 -->
    <div class="row mb-5">
        <div class="col-md-6">
            <div class="card shadow-sm p-3 mb-3">
                <h5 class="card-title">ประเภทคู่สัญญา</h5>
                <canvas id="contractTypeChart" height="250"></canvas>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card shadow-sm p-3 mb-3">
                <h5 class="card-title">สถานะเอกสาร</h5>
                <canvas id="documentStatusChart" height="250"></canvas>
            </div>
        </div>
    </div>

    <!-- Row 2 -->
    <div class="row mb-5">
        <div class="col-md-6">
            <div class="card shadow-sm p-3 mb-3">
                <h5 class="card-title">สถานะสัญญา</h5>
                <canvas id="contractStatusChart" height="250"></canvas>
            </div>
        </div>

        <!-- พายชาร์ต Contract_Category รวมทุกประเภทสัญญา -->
        <div class="col-md-6">
            <div class="card shadow-sm p-3 mb-3">
                <h5 class="card-title mb-0">การจัดเก็บสัญญา</h5>
                <canvas id="contractCategoryChart" height="250" class="mt-3"></canvas>
            </div>
        </div>
    </div>

    <!-- Row 3: KPI เต็มแถว -->
    <div class="row mb-5">
        <div class="col-md-12">
            <div class="card shadow-sm p-3 mb-3">
                <h5 class="card-title">KPI ตรวจสอบกฎหมาย</h5>
                <table class="table table-bordered text-center">
                    <thead class="table-light">
                        <tr>
                            <th>เจ้าหน้าที่</th>
                            <th>รอตรวจสอบ</th>
                            <th>ตรวจสอบเสร็จสิ้น</th>
                            <th>รวมทั้งสิ้น</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.LegalKpiChart)
                        {
                            <tr>
                                <td>@item.Owner</td>
                                <td>@item.Pending</td>
                                <td>@item.Completed</td>
                                <td>@item.Total</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<div class="container">
    <div class="col-md-12 text-end">
        <h5 class="card-title">Export</h5>
        <button class="btn btn-outline-primary btn-sm me-2" onclick="exportDashboardPdf()">PDF</button>
        <a asp-page="/EContractDashboard" asp-page-handler="ExportXls" asp-route-year="@Model.Year" asp-route-monthName="@Model.MonthName" class="btn btn-outline-success btn-sm me-2" target="_blank">XLS</a>
        <a asp-page="/EContractDashboard" asp-page-handler="ExportTxt" asp-route-year="@Model.Year" asp-route-monthName="@Model.MonthName" class="btn btn-outline-secondary btn-sm me-2" target="_blank">TXT</a>
        <button class="btn btn-outline-warning btn-sm" onclick="exportDashboardJpeg()">JPEG</button>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>

    <script>
        // ===== 1) Load data =====
        const contractTypeLabels   = @Html.Raw(Json.Serialize(Model.ContractTypeChart.Select(x => x.Label)));
        const contractTypeValues   = @Html.Raw(Json.Serialize(Model.ContractTypeChart.Select(x => x.Value)));
        const documentStatusLabels = @Html.Raw(Json.Serialize(Model.DocumentStatusChart.Select(x => x.Label)));
        const documentStatusValues = @Html.Raw(Json.Serialize(Model.DocumentStatusChart.Select(x => x.Value)));
        const contractStatusLabels = @Html.Raw(Json.Serialize(Model.ContractStatusChart.Select(x => x.Label)));
        const contractStatusValues = @Html.Raw(Json.Serialize(Model.ContractStatusChart.Select(x => x.Value)));

        // จาก SP_COUNT_REQUEST_BY_CONTRACT_CATEGORY (Type, Label, Value)
        const contractCategoryRows = @Html.Raw(Json.Serialize(Model.ContractCategoryChart));
    </script>

    <script>
        // ===== 2) Distinct Color System =====
        const DISTINCT_PALETTE = [
            '#2563EB','#F59E0B','#10B981','#EF4444','#8B5CF6','#14B8A6',
            '#DC2626','#F97316','#22C55E','#6366F1','#06B6D4','#A855F7',
            '#0EA5E9','#84CC16','#D946EF','#EA580C','#059669','#B91C1C',
            '#7C3AED','#0D9488','#9333EA','#16A34A','#1D4ED8','#D97706'
        ];
        function darken(hex, d = 28) {
            const c = hex.replace('#', '');
            const r = Math.max(0, parseInt(c.slice(0,2),16) - d);
            const g = Math.max(0, parseInt(c.slice(2,4),16) - d);
            const b = Math.max(0, parseInt(c.slice(4,6),16) - d);
            const h = v => v.toString(16).padStart(2,'0');
            return `#${h(r)}${h(g)}${h(b)}`;
        }
        function labelToIndex(label) {
            let h = 0, s = String(label ?? '');
            for (let i = 0; i < s.length; i++) h = (h * 31 + s.charCodeAt(i)) >>> 0;
            return h % DISTINCT_PALETTE.length;
        }
        function colorsForLabels(labels) {
            const bg = labels.map(l => DISTINCT_PALETTE[labelToIndex(l)]);
            const border = bg.map(c => darken(c, 32));
            return { bg, border };
        }

        // ===== 3) Chart Helper (show empty white donut when no data) =====
        function renderDonutChart(chartId, labels, data) {
            const noData = !Array.isArray(data) || data.length === 0 || data.every(v => (v ?? 0) === 0);

            let useLabels, useData, bg, border, showLegend, enableTooltip;
            if (noData) {
                useLabels = [''];
                useData   = [1];
                bg        = ['#FFFFFF'];
                border    = ['#E5E7EB'];
                showLegend    = false;
                enableTooltip = false;
            } else {
                useLabels = labels || [];
                useData   = data   || [];
                const c = colorsForLabels(useLabels);
                bg        = c.bg;
                border    = c.border;
                showLegend    = true;
                enableTooltip = true;
            }

            return new Chart(document.getElementById(chartId), {
                type: 'doughnut',
                data: { labels: useLabels, datasets: [{ data: useData, backgroundColor: bg, borderColor: border, borderWidth: 1.5 }] },
                options: { responsive: true, cutout: '60%', plugins: { legend: { position: 'bottom', display: showLegend }, tooltip: { enabled: enableTooltip } } }
            });
        }

        // ===== 4) Render Donuts =====
        renderDonutChart("contractTypeChart",   contractTypeLabels,   contractTypeValues);
        renderDonutChart("documentStatusChart", documentStatusLabels, documentStatusValues);
        renderDonutChart("contractStatusChart", contractStatusLabels, contractStatusValues);

        // ===== 5) Contract_Category รวมทุกประเภทสัญญา =====
        const aggMap = new Map();
        for (const r of contractCategoryRows) {
            const key = r.label ?? 'ไม่ระบุ';
            aggMap.set(key, (aggMap.get(key) ?? 0) + (r.value ?? 0));
        }
        const entries = Array.from(aggMap.entries());
        entries.sort((a, b) => b[1] - a[1]);
        const idxUnknown = entries.findIndex(e => e[0] === 'ไม่ระบุ');
        if (idxUnknown >= 0) { const u = entries.splice(idxUnknown, 1)[0]; entries.push(u); }
        const categoryLabels = entries.map(e => e[0]);
        const categoryValues = entries.map(e => e[1]);
        renderDonutChart("contractCategoryChart", categoryLabels, categoryValues);
    </script>

    <script>
        // ===== Export =====
        function exportDashboardJpeg(callback) {
            var element = document.querySelector('.container');
            html2canvas(element, { backgroundColor: '#fff', scale: 2 }).then(function (canvas) {
                var imgData = canvas.toDataURL('image/jpeg', 0.98);
                if (callback) { callback(imgData); }
                else {
                    var link = document.createElement('a');
                    link.download = 'EContractDashboard.jpg';
                    link.href = imgData;
                    link.click();
                }
            });
        }
        function exportDashboardPdf() {
            var element = document.querySelector('.container');
            html2canvas(element, { backgroundColor: '#fff', scale: 2 }).then(function (canvas) {
                var imgData = canvas.toDataURL('image/jpeg', 0.98);
                var imgWidth = canvas.width, imgHeight = canvas.height;
                var pdf = new window.jspdf.jsPDF({ orientation: 'portrait', unit: 'mm', format: 'a4' });
                var pageWidth = pdf.internal.pageSize.getWidth();
                var pageHeight = pdf.internal.pageSize.getHeight();
                var ratio = Math.min(pageWidth / imgWidth, pageHeight / imgHeight);
                var printWidth = imgWidth * ratio, printHeight = imgHeight * ratio;
                var marginX = (pageWidth - printWidth) / 2, marginY = (pageHeight - printHeight) / 2;
                pdf.addImage(imgData, 'JPEG', marginX, marginY, printWidth, printHeight);
                pdf.save('EContractDashboard.pdf');
            });
        }
    </script>
}
